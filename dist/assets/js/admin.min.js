document.addEventListener("DOMContentLoaded",function(){loadDashboard(),setupEventListeners()});let currentTickets=[],selectedTicket=null;function setupEventListeners(){document.getElementById("searchInput").addEventListener("input",applyFilters),document.getElementById("statusFilter").addEventListener("change",applyFilters),document.getElementById("priorityFilter").addEventListener("change",applyFilters),document.getElementById("ticketModal").addEventListener("click",function(e){e.target===this&&closeModal()})}function showTab(e){document.querySelectorAll(".tab-content").forEach(e=>{e.classList.remove("active")}),document.querySelectorAll(".tab-btn").forEach(e=>{e.classList.remove("active")}),document.getElementById(e).classList.add("active"),event.target.classList.add("active"),"dashboard"===e?loadDashboard():"tickets"===e?loadTickets():"stats"===e&&loadStatistics()}async function loadDashboard(){try{const e=await fetch('/api/statistics');if(!e.ok)throw new Error('Erro ao carregar estatísticas');const t=await e.json();document.getElementById("totalTickets").textContent=t.total,document.getElementById("openTickets").textContent=t.byStatus.Aberto||0,document.getElementById("inProgressTickets").textContent=t.byStatus["Em Andamento"]||0,document.getElementById("resolvedTickets").textContent=t.byStatus.Resolvido||0;const n=await fetch('/api/tickets?limit=5');if(!n.ok)throw new Error('Erro ao carregar tickets recentes');const i=await n.json(),s=document.getElementById("recentTicketsList");if(s.innerHTML="",0===i.length)return void(s.innerHTML='<p style="padding: 1.5rem; text-align: center; color: #6b7280;">Nenhum ticket encontrado</p>');i.slice(0,5).forEach(e=>{const t=createTicketElement(e);s.appendChild(t)})}catch(e){console.error("Erro:",e),showToast("Erro ao carregar dashboard","error")}}async function loadTickets(){try{const e=await fetch('/api/tickets');if(!e.ok)throw new Error('Erro ao carregar tickets');currentTickets=await e.json(),renderTickets(currentTickets)}catch(e){console.error("Erro:",e),showToast("Erro ao carregar tickets","error")}}async function applyFilters(){try{const e=document.getElementById("searchInput").value,t=document.getElementById("statusFilter").value,n=document.getElementById("priorityFilter").value,i=new URLSearchParams;e&&i.append("search",e),t&&"all"!==t&&i.append("status",t),n&&"all"!==n&&i.append("priority",n);const s=await fetch(`/api/tickets/filter?${i.toString()}`);if(!s.ok)throw new Error('Erro ao filtrar tickets');const a=await s.json();renderTickets(a)}catch(e){console.error("Erro:",e),showToast("Erro ao filtrar tickets","error")}}function renderTickets(e){const t=document.getElementById("ticketsList");if(t.innerHTML="",0===e.length)return void(t.innerHTML='<p style="padding: 1.5rem; text-align: center; color: #6b7280;">Nenhum ticket encontrado</p>');e.forEach(e=>{const n=createTicketElement(e);t.appendChild(n)})}function createTicketElement(e){const t=document.createElement("div");t.className="ticket-item",t.onclick=()=>openTicketModal(e);const n=new Date(e.createdAt).toLocaleDateString("pt-BR"),s=new Date(e.createdAt).toLocaleTimeString("pt-BR",{hour:"2-digit",minute:"2-digit"});return t.innerHTML=`
        <div class="ticket-header">
            <div class="ticket-info">
                <h3>
                    ${e.ticketNumber}
                    ${e.files&&e.files.length>0?'<i class="fas fa-paperclip" style="color: #6b7280; font-size: 0.875rem;"></i>':""}
                </h3>
                <p><strong>${e.firstName} ${e.lastName}</strong> - ${e.department}</p>
                <p>${e.destinationArea}</p>
                <p style="color: #9ca3af; font-size: 0.75rem;">${n} às ${s}</p>
            </div>
            <div class="ticket-badges">
                <span class="badge status-${e.status.toLowerCase().replace(" ","-")}">${e.status}</span>
                <span class="badge priority-${e.priority.toLowerCase()}">${e.priority}</span>
            </div>
        </div>
        <p style="color: #4b5563; margin-top: 0.5rem;">${e.description.substring(0,100)}${e.description.length>100?"..":""}</p>
    `,t}function openTicketModal(e){selectedTicket=e;const t=document.getElementById("ticketModal"),n=document.getElementById("modalTitle"),s=document.getElementById("modalBody");n.textContent=`Ticket ${e.ticketNumber}`;const i=new Date(e.createdAt).toLocaleString("pt-BR"),a=new Date(e.updatedAt).toLocaleString("pt-BR");let o="";e.files&&e.files.length>0&&(o=`
            <div style="margin-top: 1rem;">
                <h4 style="margin-bottom: 0.5rem; font-weight: 600;">Arquivos Anexados:</h4>
                <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                    ${e.files.map((t,n)=>`
                        <button onclick="downloadFile('${e.id}', ${n})" 
                                style="display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem; background: #f3f4f6; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.875rem;">
                            <i class="fas fa-download"></i>
                            ${t.name}
                        </button>
                    `).join("")}
                </div>
            </div>
        `);let d="";e.notes&&e.notes.length>0&&(d=`
            <div style="margin-top: 1.5rem;">
                <h4 style="margin-bottom: 0.75rem; font-weight: 600;">Notas:</h4>
                ${e.notes.map(e=>`
                    <div style="background: #f9fafb; padding: 0.75rem; border-radius: 0.5rem; margin-bottom: 0.5rem;">
                        <p style="margin-bottom: 0.25rem;">${e.text}</p>
                        <small style="color: #6b7280;">${new Date(e.createdAt).toLocaleString("pt-BR")}</small>
                    </div>
                `).join("")}
            </div>
        `),s.innerHTML=`
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
            <div>
                <label style="font-weight: 600; display: block; margin-bottom: 0.25rem;">Nome Completo</label>
                <p>${e.firstName} ${e.lastName}</p>
            </div>
            <div>
                <label style="font-weight: 600; display: block; margin-bottom: 0.25rem;">Setor</label>
                <p>${e.department}</p>
            </div>
            <div>
                <label style="font-weight: 600; display: block; margin-bottom: 0.25rem;">Área de Destino</label>
                <p>${e.destinationArea}</p>
            </div>
            <div>
                <label style="font-weight: 600; display: block; margin-bottom: 0.25rem;">Contato</label>
                <p>${e.contact||"Não informado"}</p>
            </div>
        </div>
        
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
            <div>
                <label style="font-weight: 600; display: block; margin-bottom: 0.5rem;">Status</label>
                <select id="modalStatus" onchange="updateTicketField('status', this.value)" style="width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.25rem;">
                    <option value="Aberto" ${"Aberto"===e.status?"selected":""}>Aberto</option>
                    <option value="Em Andamento" ${"Em Andamento"===e.status?"selected":""}>Em Andamento</option>
                    <option value="Resolvido" ${"Resolvido"===e.status?"selected":""}>Resolvido</option>
                    <option value="Fechado" ${"Fechado"===e.status?"selected":""}>Fechado</option>
                </select>
            </div>
            <div>
                <label style="font-weight: 600; display: block; margin-bottom: 0.5rem;">Prioridade</label>
                <select id="modalPriority" onchange="updateTicketField('priority', this.value)" style="width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.25rem;">
                    <option value="Baixa" ${"Baixa"===e.priority?"selected":""}>Baixa</option>
                    <option value="Média" ${"Média"===e.priority?"selected":""}>Média</option>
                    <option value="Alta" ${"Alta"===e.priority?"selected":""}>Alta</option>
                    <option value="Crítica" ${"Crítica"===e.priority?"selected":""}>Crítica</option>
                </select>
            </div>
        </div>
        
        <div style="margin-bottom: 1.5rem;">
            <label style="font-weight: 600; display: block; margin-bottom: 0.5rem;">Descrição</label>
            <div style="background: #f9fafb; padding: 1rem; border-radius: 0.5rem; border: 1px solid #e5e7eb;">
                ${e.description}
            </div>
        </div>
        
        ${o}
        
        <div style="margin-top: 1.5rem;">
            <label style="font-weight: 600; display: block; margin-bottom: 0.5rem;">Adicionar Nota</label>
            <div style="display: flex; gap: 0.5rem;">
                <textarea id="newNote" placeholder="Digite uma nota..." style="flex: 1; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.25rem; resize: vertical; min-height: 60px;"></textarea>
                <button onclick="addNote()" style="background: #3b82f6; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.25rem; cursor: pointer;">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
        </div>
        
        ${d}
        
        <div style="margin-top: 1.5rem; padding-top: 1rem; border-top: 1px solid #e5e7eb; display: flex; justify-content: space-between; align-items: center;">
            <div style="font-size: 0.875rem; color: #6b7280;">
                <p>Criado: ${i}</p>
                <p>Atualizado: ${a}</p>
            </div>
            <button onclick="deleteTicket()" style="background: #dc2626; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.25rem; cursor: pointer;">
                <i class="fas fa-trash"></i>
                Deletar
            </button>
        </div>
    `,t.classList.add("active")}function closeModal(){document.getElementById("ticketModal").classList.remove("active"),selectedTicket=null}async function updateTicketField(e,t){if(!selectedTicket)return;try{const n={};n[e]=t;const i=await fetch(`/api/tickets/${selectedTicket.id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(n)});if(!i.ok)throw new Error(`Erro ao atualizar ${e}`);showToast(`${"status"===e?"Status":"Prioridade"} atualizado com sucesso!`),selectedTicket[e]=t;const s=document.getElementById("dashboard");s.classList.contains("active")&&loadDashboard();const a=document.getElementById("tickets");a.classList.contains("active")&&applyFilters()}catch(n){console.error(`Erro ao atualizar ${e}:`,n),showToast(`Erro ao atualizar ${e}`,"error")}}async function addNote(){if(!selectedTicket)return;try{const e=document.getElementById("newNote").value.trim();if(!e)return void showToast("Digite uma nota antes de adicionar","error");const t=await fetch(`/api/tickets/${selectedTicket.id}/notes`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text:e})});if(!t.ok)throw new Error("Erro ao adicionar nota");const n=await t.json();showToast("Nota adicionada com sucesso!"),document.getElementById("newNote").value="",openTicketModal(n)}catch(e){console.error("Erro ao adicionar nota:",e),showToast("Erro ao adicionar nota","error")}}async function deleteTicket(){if(!selectedTicket)return;try{if(confirm("Tem certeza que deseja deletar este ticket? Esta ação não pode ser desfeita.")){const e=await fetch(`/api/tickets/${selectedTicket.id}`,{method:'DELETE'});if(!e.ok)throw new Error("Erro ao deletar ticket");showToast("Ticket deletado com sucesso!"),closeModal(),document.getElementById("dashboard").classList.contains("active")&&loadDashboard(),document.getElementById("tickets").classList.contains("active")&&loadTickets()}}catch(e){console.error("Erro ao deletar ticket:",e),showToast("Erro ao deletar ticket","error")}}async function downloadFile(e,t){try{const n=await fetch(`/api/tickets/${e}/files/${t}`);if(!n.ok)throw new Error("Erro ao buscar arquivo");const i=await n.json(),s=document.createElement("a");s.href=i.data,s.download=i.name,document.body.appendChild(s),s.click(),document.body.removeChild(s)}catch(n){console.error("Erro ao baixar arquivo:",n),showToast("Erro ao baixar arquivo","error")}}async function loadStatistics(){try{const e=await fetch('/api/statistics');if(!e.ok)throw new Error('Erro ao carregar estatísticas');const t=await e.json(),n=document.getElementById("statusChart");n.innerHTML="",Object.entries(t.byStatus).forEach(([e,t])=>{const i=document.createElement("div");i.className="chart-item",i.innerHTML=`
            <span>${e}</span>
            <span>${t}</span>
        `,n.appendChild(i)});const i=document.getElementById("priorityChart");i.innerHTML="",Object.entries(t.byPriority).forEach(([e,t])=>{const n=document.createElement("div");n.className="chart-item",n.innerHTML=`
            <span>${e}</span>
            <span>${t}</span>
        `,i.appendChild(n)})}catch(e){console.error("Erro:",e),showToast("Erro ao carregar estatísticas","error")}}function showToast(e,t="success"){const n=document.getElementById("toast");n.textContent=e,n.className="toast show","error"===t?n.classList.add("error"):n.classList.remove("error"),setTimeout(()=>{n.classList.remove("show")},3e3)}